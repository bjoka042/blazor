@page "/load"
@page "/load/{TypeName}"
@using System.Runtime.Loader
@using McMaster.NETCore.Plugins

<h1>Hello, world!</h1>

Welcome to your new app.

@Status


@dynamicComponent()

@code {
    // https://stevenknox.net/exploring-assembly-unloading-in-net-core-3-0-by-building-a-simple-plugin-architecture/
    [ParameterAttribute]
    public string TypeName { get; set; }

    public string Status { get; set; }

    protected override Task OnParametersSetAsync()
    {
        LoadAssemblies();

        return Task.CompletedTask;
    }

    private void LoadAssemblies()
    {
        Status = "LoadAssemblies..";

        //var targetDirectory = @"D:\Repos\blazor\Runtime\netcoreapp3.1\";
        //string [] fileEntries = System.IO.Directory.GetFiles(targetDirectory, @"*.dll");
        //foreach(string fileName in fileEntries)
        //    LoadAssembly(fileName);

        var loader = McMaster.NETCore.Plugins.PluginLoader.CreateFromAssemblyFile(System.IO.Path.Combine(AppContext.BaseDirectory, "plugins/AnotherLibrary/AnotherLibrary.dll"));

        var context = System.Runtime.Loader.AssemblyLoadContext.GetLoadContext(typeof(Startup).Assembly);
        using (context.EnterContextualReflection())
        {
            //var myPluginType = System.Type.GetType("MyPlugin.PluginClass");
            //var myPluginAssembly = System.Reflection.Assembly.Load("MyPlugin1");
            loader.LoadDefaultAssembly();
        }

        Status = "Assemblies loaded..";
    }

    //private void LoadAssembly(string fileName)
    //{
    //    Status = $"LoadAssembly {fileName}";
    //    var context = AssemblyLoadContext.GetLoadContext(typeof(Startup).Assembly);


    //    var assembly = context.LoadFromAssemblyPath(fileName);


    //}

    RenderFragment dynamicComponent() => builder =>
    {
        var renderComponentType = System.Reflection.Assembly.GetAssembly(typeof(Components.ExampleJsInterop)).GetTypes().Where(x => x.Name == TypeName).FirstOrDefault();
        if (renderComponentType != null)
        {

            builder.OpenComponent(0, renderComponentType);
            //builder.AddAttribute(1, "Title", "Some title");
            builder.CloseComponent();
        }
    };


}